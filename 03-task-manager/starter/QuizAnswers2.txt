1. In this lesson, you created a middleware function called asyncWrapper. Why?
We have asynchronous operations, but without asyncWrapper they becomes redundant. Middleware asyncWrapper function wrapped all controllers and in there we set up our functionality
where we do not repeat ourselves. 

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist.
Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class.
Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    // your code here
    
    return next(createCustomError(`no task was found with id: ${taskID}`, 404))

  }
  res.status(200).json({ task });
});